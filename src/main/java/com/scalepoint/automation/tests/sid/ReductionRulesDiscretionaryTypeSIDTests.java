package com.scalepoint.automation.tests.sid;

import com.scalepoint.automation.BaseTest;
import com.scalepoint.automation.pageobjects.dialogs.SettlementDialog;
import com.scalepoint.automation.services.usersmanagement.CompanyCode;
import com.scalepoint.automation.utils.OperationalUtils;
import com.scalepoint.automation.utils.annotations.UserCompany;
import com.scalepoint.automation.utils.data.entity.Claim;
import com.scalepoint.automation.utils.data.entity.ClaimItem;
import com.scalepoint.automation.utils.data.entity.ReductionRule;
import com.scalepoint.automation.utils.data.entity.credentials.User;
import com.scalepoint.automation.utils.listeners.InvokedMethodListener;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

import static org.testng.Assert.assertEquals;

@Listeners({InvokedMethodListener.class})
public class ReductionRulesDiscretionaryTypeSIDTests extends BaseTest {

    /**
     * GIVEN: User logs in as alkauser1
     * WHEN: Enter Category
     * AND: Enter Subcategory
     * AND: Enter new Price
     * AND: age indicated in policy Rule parameters
     * THEN: Reduction rule row with button appears
     * WHEN: click button
     * THEN: Value generated according rule settings added to the field
     * THEN: Value in depreciation field is changed to value of reduction rule
     * <p>
     * GIVEN: User logs in as alkauser1
     * WHEN: Enter Category
     * AND: Enter Subcategory
     * AND: Enter new Price
     * AND: age indicated in policy Rule parameters
     * THEN: Reduction rule row with button appears
     * WHEN: tick Automatically depreciation updated
     * THEN: Value generated according rule settings added to the field
     * THEN: Value in depreciation field is changed to value of reduction rule
     * <p>
     * GIVEN: User logs in as alkauser1
     * WHEN: Enter Category
     * AND: Enter Subcategory
     * AND: Enter new Price
     * AND: age indicated in unpublished policy Rule parameters
     * THEN: Reduction rule row with button does not appear
     * THEN: Value generated according rule settings is not added to the field
     * <p>
     * GIVEN: User logs in as alkauser1
     * WHEN: Enter Category
     * AND: Enter Subcategory
     * AND: Enter new Price
     * AND: age indicated in policy Rule parameters
     * AND: Claim with policy type A
     * AND: Rule with policy Type B
     * THEN: Reduction rule row with button appears
     * WHEN: click button
     * THEN: Value generated by the rule should NOT be added to the field
     * <p>
     * GIVEN: User logs in as alkauser1
     * WHEN: Enter Category
     * AND: Enter Subcategory
     * AND: Enter new Price
     * AND: age indicated in policy Rule parameters
     * AND: Claim with policy type A
     * AND: Rule with policy Type B
     * THEN: Reduction rule row with button appears
     * WHEN: tick Automatically depreciation updated
     * THEN: Value generated by the rule should NOT be added to the field
     */

    @Test(description = "ECC-3031 Verify reduction rule discretionary type after clicking Reduction rule button", dataProvider = "testDataProvider")
    public void ecc3031_3_reductionRulePolicyTypeDiscretionary(@UserCompany(CompanyCode.ALKA) User user,
                                                               Claim claim,
                                                               ClaimItem claimItem,
                                                               ReductionRule reductionRule) {
        SettlementDialog settlementDialog = loginAndCreateClaim(user, claim, claim.getPolicyTypeFF()).addManually().
                automaticDepreciation(false).
                fillDescription(claimItem.getTextFieldSP()).
                fillCustomerDemand(claimItem.getBigCustomDemandPrice()).
                fillNewPrice(claimItem.getNewPriceSP_2400()).
                fillCategory(claimItem.getAlkaCategory()).
                fillSubCategory(claimItem.getAlkaSubCategory()).
                enableAge(claimItem.getAgeStatus()).
                enterAgeYears(reductionRule.getAgeFrom2()).
                selectValuation(SettlementDialog.Valuation.NEW_PRICE);

        Integer depreciationValue = Integer.valueOf(settlementDialog.getDepreciationValue());
        SidCalculations.ValuationWithReduction valuationWithReduction =
                SidCalculations.calculateWithReduction(claimItem.getNewPriceSP_2400(), depreciationValue, claimItem.getAlkaUserReductionRule_25());

        String fetchedCashValue = String.format("%.2f", settlementDialog.cashCompensationValue());
        String calculatedCashValue = String.format("%.2f",valuationWithReduction.cashCompensation);
        String fetchedDepreciation = String.format("%.2f", settlementDialog.fetchDepreciation());
        String calculatedDepreciation = String.format("%.2f", valuationWithReduction.getDepreciation());

        assertEquals(fetchedCashValue, calculatedCashValue, "Cash compensation incorrect");
        assertEquals(fetchedDepreciation, calculatedDepreciation, "Depreciation incorrect");
        assertEquals(settlementDialog.getDepreciationValue(), "0");

        settlementDialog.applyReductionRuleByValue(claimItem.getAlkaUserReductionRule_25().toString());
        String fetchedCashValueWithReduction = String.format("%.2f", settlementDialog.cashCompensationValue());
        String fetchedDepreciationWithReduction = String.format("%.2f", settlementDialog.fetchDepreciation());
        String calculatedCashWithReduction = String.format("%.2f", valuationWithReduction.getCashCompensationWithReduction());
        String calculatedReduction = String.format("%.2f", valuationWithReduction.getReduction());

        assertEquals(fetchedCashValueWithReduction, calculatedCashWithReduction, "Cash compensation incorrect");
        assertEquals(fetchedDepreciationWithReduction, calculatedReduction, "Depreciation incorrect");
        assertEquals(settlementDialog.getDepreciationValue(), claimItem.getAlkaUserReductionRule_25().toString());
        settlementDialog.cancel();
    }

    /**
     * GIVEN: User logs in as alkauser1
     * WHEN: Enter Category
     * AND: Enter Subcategory
     * AND: Enter new Price
     * AND: age indicated in policy Rule parameters
     * THEN: Reduction rule row with button appears
     * WHEN: tick Automatically depreciation updated
     * THEN: Value generated according rule settings added to the field
     * THEN: Value in depreciation field is changed to value of reduction rule
     */
    @Test(description = "ECC-3031 Verify reduction rule discretionary type after ticking Depreciation automatically updated checkbox", dataProvider = "testDataProvider")
    public void ecc3031_4_reductionRulePolicyTypeDiscretionaryAutomatic(@UserCompany(CompanyCode.ALKA) User user,
                                                                        Claim claim,
                                                                        ClaimItem claimItem,
                                                                        ReductionRule reductionRule) {
        SettlementDialog settlementDialog = loginAndCreateClaim(user, claim, claim.getPolicyTypeFF()).addManually()
                .automaticDepreciation(false)
                .fillDescription(claimItem.getTextFieldSP())
                .fillCustomerDemand(claimItem.getBigCustomDemandPrice())
                .fillNewPrice(claimItem.getNewPriceSP_2400())
                .fillCategory(claimItem.getAlkaCategory())
                .fillSubCategory(claimItem.getAlkaSubCategory())
                .enableAge(claimItem.getAgeStatus())
                .enterAgeYears(reductionRule.getAgeFrom2())
                .selectValuation(SettlementDialog.Valuation.NEW_PRICE);

        int depreciation = Integer.valueOf(settlementDialog.getDepreciationValue());
        SidCalculations.ValuationWithReduction valuationWithReduction =
                SidCalculations.calculateWithReduction(claimItem.getNewPriceSP_2400(), depreciation, claimItem.getAlkaUserReductionRule_25());

        String fetchedCashValue = String.format("%.2f", settlementDialog.cashCompensationValue());
        String calculatedCashValue = String.format("%.2f", valuationWithReduction.cashCompensation);
        String fetchedDepreciation = String.format("%.2f", settlementDialog.fetchDepreciation());
        String calculatedDepreciation = String.format("%.2f", valuationWithReduction.getDepreciation());

        assertEquals(fetchedCashValue, calculatedCashValue, "Cash compensation incorrect");
        assertEquals(fetchedDepreciation, calculatedDepreciation, "Depreciation incorrect");
        assertEquals(settlementDialog.getDepreciationValue(), "0");

        settlementDialog
                .automaticDepreciation(true)
                .selectValuation(SettlementDialog.Valuation.NEW_PRICE);

        String fetchedCashValueWithReduction = String.format("%.2f", settlementDialog.cashCompensationValue());
        String calculatedCashWithReduction = String.format("%.2f", valuationWithReduction.cashCompensationWithReduction);

        assertEquals(fetchedCashValueWithReduction, calculatedCashWithReduction, "Cash compensation incorrect");

        String fetchedDepreciationWithReduction = String.format("%.2f", settlementDialog.fetchDepreciation());
        String calculatedReduction = String.format("%.2f", valuationWithReduction.getReduction());

        assertEquals(fetchedDepreciationWithReduction, calculatedReduction, "Depreciation incorrect");
        assertEquals(settlementDialog.getDepreciationValue(), claimItem.getAlkaUserReductionRule_25().toString());
        settlementDialog.cancel();
    }

    /**
     * GIVEN: User logs in as alkauser1
     * WHEN: Enter Category
     * AND: Enter Subcategory
     * AND: Enter new Price
     * AND: age indicated in unpublished policy Rule parameters
     * THEN: Reduction rule row with button does not appear
     * THEN: Value generated according rule settings is not added to the field
     */
    @Test(description = "ECC-3031 Verify unpublished rule", dataProvider = "testDataProvider")
    public void ecc3031_5_reductionRuleUnpublishedPolicy(@UserCompany(CompanyCode.ALKA) User user,
                                                         Claim claim,
                                                         ClaimItem claimItem,
                                                         ReductionRule reductionRule) {
        SettlementDialog settlementDialog = loginAndCreateClaim(user, claim, claim.getPolicyTypeFF()).addManually()
                .automaticDepreciation(false)
                .fillDescription(claimItem.getTextFieldSP())
                .fillCustomerDemand(claimItem.getBigCustomDemandPrice())
                .fillNewPrice(claimItem.getNewPriceSP_2400())
                .fillCategory(claimItem.getAlkaCategoryUnpublishedPolicy())
                .fillSubCategory(claimItem.getAlkaSubCategoryUnpublishedPolicy())
                .enableAge(claimItem.getAgeStatus())
                .enterAgeYears(reductionRule.getAgeFrom2())
                .selectValuation(SettlementDialog.Valuation.NEW_PRICE);

        int depreciation = Integer.valueOf(settlementDialog.getDepreciationValue());
        SidCalculations.ValuationWithReduction valuationWithReduction =
                SidCalculations.calculateWithReduction(claimItem.getNewPriceSP_2400(), depreciation, 0);

        String calculatedCashValue = String.format("%.2f", valuationWithReduction.cashCompensation);
        String fetchedCashValue = String.format("%.2f", settlementDialog.cashCompensationValue());
        String fetchedDepreciation = String.format("%.2f", settlementDialog.fetchDepreciation());
        String calculatedDepreciation = String.format("%.2f", valuationWithReduction.getDepreciation());

        assertEquals(fetchedCashValue, calculatedCashValue, "Cash compensation incorrect");
        assertEquals(fetchedDepreciation, calculatedDepreciation, "Depreciation incorrect");
        assertEquals(settlementDialog.getDepreciationValue(), "0");
        settlementDialog.cancel();
    }

    /**
     * GIVEN: User logs in as alkauser1
     * WHEN: Enter Category
     * AND: Enter Subcategory
     * AND: Enter new Price
     * AND: age indicated in policy Rule parameters
     * AND: Claim with policy type A
     * AND: Rule with policy Type B
     * THEN: Reduction rule row with button appears
     * WHEN: click button
     * THEN: Value generated by the rule should NOT be added to the field
     */


    @Test(description = "ECC-3031 Verify rule with type of Policy indicated after clicking Reduction rule button", dataProvider = "testDataProvider")
    public void ecc3031_6_reductionRulePolicyTypeIndicated(@UserCompany(CompanyCode.ALKA) User user,
                                                           Claim claim,
                                                           ClaimItem claimItem,
                                                           ReductionRule reductionRule) {
        SettlementDialog settlementDialog = loginAndCreateClaim(user, claim, claim.getPolicyTypeAF()).addManually()
                .automaticDepreciation(false)
                .fillDescription(claimItem.getTextFieldSP())
                .fillCustomerDemand(claimItem.getBigCustomDemandPrice())
                .fillNewPrice(claimItem.getNewPriceSP_2400())
                .fillCategory(claimItem.getExistingCat3_Telefoni())
                .fillSubCategory(claimItem.getExistingSubCat3_Mobiltelefoner())
                .enableAge(claimItem.getAgeStatus())
                .enterAgeYears(reductionRule.getAgeFrom2())
                .selectValuation(SettlementDialog.Valuation.NEW_PRICE);
        int depreciation = Integer.valueOf(settlementDialog.getDepreciationValue());
        SidCalculations.ValuationWithReduction valuationWithReduction =
                SidCalculations.calculateWithReduction(claimItem.getNewPriceSP_2400(), depreciation, claimItem.getAlkaUserReductionRule_25());

        String fetchedCashValue = String.format("%.2f", settlementDialog.cashCompensationValue());
        String calculatedCashValue = String.format("%.2f", valuationWithReduction.cashCompensation);
        String fetchedDepreciation = String.format("%.2f", settlementDialog.fetchDepreciation());
        String calculatedDepreciation = String.format("%.2f", valuationWithReduction.getDepreciation());
        assertEquals(fetchedCashValue, calculatedCashValue, "Cash compensation incorrect");
        assertEquals(fetchedDepreciation, calculatedDepreciation, "Depreciation incorrect");
        assertEquals(settlementDialog.getDepreciationValue(), "0");
        settlementDialog.applyReductionRuleByValue(claimItem.getAlkaUserReductionRule40());
        String fetchedCashValueWithReduction = String.format("%.2f", settlementDialog.cashCompensationValue());
        String fetchedDepreciationWithReduction = String.format("%.2f", settlementDialog.fetchDepreciation());
        assertEquals(fetchedCashValueWithReduction, calculateCashCompensationWithPolicy(claimItem), "Cash compensation incorrect");
        assertEquals(fetchedDepreciationWithReduction, calculatedReductionWithPolicy(claimItem), "Depreciation incorrect");
        assertEquals(settlementDialog.getDepreciationValue(), claimItem.getAlkaUserReductionRule40());
        settlementDialog.cancel();
    }


    /**
     * GIVEN: User logs in as alkauser1
     * WHEN: Enter Category
     * AND: Enter Subcategory
     * AND: Enter new Price
     * AND: age indicated in policy Rule parameters
     * AND: Claim with policy type A
     * AND: Rule with policy Type B
     * THEN: Reduction rule row with button appears
     * WHEN: tick Automatically depreciation updated
     * THEN: Value generated by the rule should NOT be added to the field
     */


    @Test(description = "ECC-3031 Verify rule with type of Policy indicated after ticking Depreciation automatically updated checkbox", dataProvider = "testDataProvider")
    public void ecc3031_7_reductionRulePolicyTypeIndicatedAutomatic(@UserCompany(CompanyCode.ALKA) User user,
                                                                    Claim claim,
                                                                    ClaimItem claimItem,
                                                                    ReductionRule reductionRule) {
        SettlementDialog settlementDialog = loginAndCreateClaim(user, claim, claim.getPolicyTypeAF()).addManually()
                .automaticDepreciation(false)
                .fillDescription(claimItem.getTextFieldSP())
                .fillCustomerDemand(claimItem.getBigCustomDemandPrice())
                .fillNewPrice(claimItem.getNewPriceSP_2400())
                .fillCategory(claimItem.getExistingCat3_Telefoni())
                .fillSubCategory(claimItem.getExistingSubCat3_Mobiltelefoner())
                .enableAge(claimItem.getAgeStatus())
                .enterAgeYears(reductionRule.getAgeFrom2())
                .selectValuation(SettlementDialog.Valuation.NEW_PRICE);

        int depreciation = Integer.valueOf(settlementDialog.getDepreciationValue());

        String fetchedCashValue = String.format("%.2f", settlementDialog.cashCompensationValue());
        String calculatedCashValue = String.format("%.2f", OperationalUtils.doubleString(calculateCashCompensation(claimItem, depreciation)));
        String fetchedDepreciation = String.format("%.2f", settlementDialog.fetchDepreciation());
        assertEquals(fetchedCashValue, calculatedCashValue, "Cash compensation incorrect");
        assertEquals(fetchedDepreciation, calculateDepreciation(claimItem, depreciation), "Depreciation incorrect");
        assertEquals(settlementDialog.getDepreciationValue(), "0");
        settlementDialog
                .automaticDepreciation(true)
                .selectValuation(SettlementDialog.Valuation.NEW_PRICE);
        String fetchedCashValueWithReduction = String.format("%.2f", settlementDialog.cashCompensationValue());
        String fetchedDepreciationWithReduction = String.format("%.2f", settlementDialog.fetchDepreciation());
        assertEquals(fetchedCashValueWithReduction, calculateCashCompensationWithPolicy(claimItem), "Cash compensation incorrect");
        assertEquals(fetchedDepreciationWithReduction, calculatedReductionWithPolicy(claimItem), "Depreciation incorrect");
        assertEquals(settlementDialog.getDepreciationValue(), claimItem.getAlkaUserReductionRule40());
        settlementDialog.cancel();
    }

    private String calculateCashCompensation(ClaimItem claimItem, int depreciationValue) {
        Double cashCompensation = Double.valueOf(claimItem.getNewPriceSP_2400()) - Double.valueOf(calculateDepreciation(claimItem, depreciationValue));
        return String.valueOf(cashCompensation);
    }

    private String calculateCashCompensationWithReduction(ClaimItem claimItem) {
        Double cashCompensation = Double.valueOf(claimItem.getNewPriceSP_2400()) - Double.valueOf(calculatedReduction(claimItem));
        return String.format("%.2f", cashCompensation);
    }

    private String calculateDepreciation(ClaimItem claimItem, double depreciationValue) {
        Double depreciation = claimItem.getNewPriceSP_2400() * depreciationValue / 100;
        return String.format("%.2f", depreciation);
    }

    private String calculatedReduction(ClaimItem claimItem) {
        Double depreciation = Double.valueOf(claimItem.getNewPriceSP_2400()) * Double.valueOf(claimItem.getAlkaUserReductionRule_25()) / 100;
        return String.format("%.2f", depreciation);
    }

    private String calculatedReductionWithPolicy(ClaimItem claimItem) {
        Double depreciation = Double.valueOf(claimItem.getNewPriceSP_2400()) * Double.valueOf(claimItem.getAlkaUserReductionRule40()) / 100;
        return String.format("%.2f", depreciation);
    }

    private String calculateCashCompensationWithPolicy(ClaimItem claimItem) {
        Double cashCompensation = Double.valueOf(claimItem.getNewPriceSP_2400()) - Double.valueOf(calculatedReductionWithPolicy(claimItem));
        return String.format("%.2f", cashCompensation);
    }

}
